'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
(https://projecteuler.net/problem=12)
'''


# Prime factoring to get each the degree of each prime in order to use this [fomula](https://mathschallenge.net/library/number/number_of_divisors)
# I am using the form of primes [as you can see here](https://math.stackexchange.com/questions/41623/is-that-true-that-all-the-prime-numbers-are-of-the-form-6m-pm-1) to calculate faster
# calculating up until a number canot be factored any more and than check if the remaning number in n is not 1 and is a factor of the original number in order to reduce the complexity
def Get_Devisors_Amount(n):#Prime factorization
    if n ==0: return 0
    if n <=1: return 1
    OriginalN = n
    dcount = 1
    count = 0
    while n%2==0:
        count+=1
        n//=2
    dcount*=(count+1)
    
    count = 0
    while n%3==0:
        count+=1
        n//=3
    dcount*=(count+1)
    
    i = 1#count for the form of primes 6n+-1
    while n!=1:
        t = 6*i+1
        count = 0
        while n%t==0:
            count+=1
            n//=t
        dcount*=(count+1)
        t = 6*i-1
        count = 0
        while n%t==0:
            count+=1
            n//=t
        if count!=0:
            dcount*=(count+1)
        
        if t*t>n :# no bigger t will factor n
            break
        i+=1
    
    if dcount ==1:# means n is a prime
        return 2
    if n!=1 and OriginalN%n==0:# there is only one prime over the sqrt(n) and it will be left after factoriztion
        return dcount*2
    return dcount



n = 500
i = 0
tri = 0
devisor = 0
while devisor<=n:
    i+=1
    tri+=i
    devisor = Get_Devisors_Amount(tri)
print(tri)





from math import sqrt
# a slower algorithem that works
#takes advantge on the fact that all devisors of a number can be devided into pairs
def Get_Devisors_Amount2(n):
    count = 0
    limit = sqrt(n)
    for i in range(1,int(limit)+1):
        if n%i==0:
            count+=2
    if limit.is_integer():#if n has a pefect sqrt means it was counted once over(because the sqrt is pairing with itself thus it was counted twice)
        return count-1
    return count